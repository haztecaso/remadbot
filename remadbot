#!/usr/bin/env python3

from enum import Enum
from time import sleep

from random import random
import argparse
import sys
import logging
import json
from typing import Callable, Iterable
import requests
import telegram
from bs4 import BeautifulSoup, Tag
from pathlib import Path

from dataclasses import dataclass


BASE_URL = "https://www.remad.es/web"
CATALOGUE_URL = f"{BASE_URL}/catalogue"
CATALOGUE_MORE_URL = f"{CATALOGUE_URL}/more"
COMMON_HEADERS = {"User-Agent": "remadbot"}

logger = logging.getLogger("remadbot")
logger.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s:%(levelname)s:%(process)d:%(message)s')
log_file = 'remadbot.log'

try:
    file_handler = logging.FileHandler(log_file)
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
except OSError as e:
    print("WARNING: Error setting up file logger: ", e)
    pass

stream_handler = logging.StreamHandler(sys.stdout)
stream_handler.setFormatter(formatter)
logger.addHandler(stream_handler)

def escape_md(text:str):
    if text is None:
        return text
    for char in "_*[]()~`>#+-=|{}.!":
        text = text.replace(char, '\\'+char)
    return text

@dataclass
class Config:
    db_file: str
    telegram_bot_token: str
    telegram_chat_id: str

    @property
    def telegram_send_conf(self):
        return {
            "chat_id": self.telegram_chat_id,
            "parse_mode": telegram.ParseMode.MARKDOWN_V2,
            }
        


def load_config(args) -> Config:
    config_file = "config.json" if not args.conf else args.conf
    try:
        with open(config_file) as f:
            conf: dict = json.load(f)
            conf = conf["prod"] if args.prod else conf["dev"]
    except FileNotFoundError:
        print(f"ERROR: config file '{config_file}' not found.")
        sys.exit(1)
    else:
        return Config(
            db_file=conf["db_file"],
            telegram_bot_token=conf["telegram"]["bot_token"],
            telegram_chat_id=conf["telegram"]["chat_id"],
        )


@dataclass
class Tokens:
    remad_session: str
    cookie_token: str
    meta_token: str

    @property
    def cookies(self) -> dict[str, str]:
        return {"XSRF-TOKEN": self.cookie_token, "remad_session": self.remad_session}

    @property
    def headers(self) -> dict[str, str]:
        return {"x-csrf-token": self.meta_token}


def get_tokens() -> Tokens:
    response = requests.get(CATALOGUE_URL, headers=COMMON_HEADERS)
    remad_session = response.cookies["remad_session"]
    assert isinstance(remad_session, str), "remad_session cookie not found!"
    cookie_token = response.cookies["XSRF-TOKEN"]
    assert isinstance(cookie_token, str), "XSRF-TOKEN cookie not found!"
    soup = BeautifulSoup(response.text, "html.parser")
    csrf_meta = soup.find("meta", {"name": "csrf-token"})
    assert isinstance(csrf_meta, Tag), "xsrf-token meta tag not found!"
    meta_token = csrf_meta["content"]
    assert isinstance(meta_token, str), "invalid xsrf-token meta tag"
    return Tokens(remad_session, cookie_token, meta_token)


def request_more(tokens: Tokens, limit=1) -> dict:
    return requests.post(
        CATALOGUE_MORE_URL,
        headers=COMMON_HEADERS | tokens.headers,
        cookies=tokens.cookies,
        data={"start": 1, "limit": limit},
    ).json()


def get_limit(tokens: Tokens) -> int:
    return request_more(tokens)["total"]


def get_raw_data(tokens: Tokens, limit: int | None = None) -> list[dict]:
    return request_more(tokens, limit if limit else get_limit(tokens))["data"]


class State(Enum):
    PUB = "PUBLICADO"
    RES = "RESERVADO"


@dataclass
class Category:
    id_: int
    type_: int
    name: str


@dataclass
class Place:
    id_: int
    name: str
    coords: tuple[float, float]

    @property
    def url(self):
        return f"https://www.remad.es/web/plf/{self.id_}"


@dataclass
class Item:
    id_: int
    file_id: int
    name: str
    description: str
    ref_code: str
    state: State
    category: Category
    place: Place

    @property
    def url(self):
        return f"https://www.remad.es/web/antiquity/{self.id_}/"

    @property
    def file_url(self):
        return f"https://www.remad.es/file/thumbnail/{self.file_id}/"

    @property
    def telegram_message(self):
        m  = f"[*{escape_md(self.name)}*]({self.url}) en [{escape_md(self.place.name)}]({self.place.url})\n"
        m += f"Categoría: {escape_md(self.category.name)}\n"
        m += f"Descripción: {escape_md(self.description)}"
        return m

    def __repr__(self) -> str:
        return f"""Item(id={self.id_})"""


def parse_item(r_item: dict):
    r_category = r_item["category"]
    r_place = r_item["plf"]
    return Item(
        id_=r_item["id"],
        file_id=r_item["file_id"],
        name=r_item["name"],
        description=r_item["description"],
        ref_code=r_item["ref_number"],
        state=State(r_item["state"]),
        category=Category(
            id_=r_category["id"],
            type_=r_category["type"],
            name=r_category["name"],
        ),
        place=Place(
            id_=r_place["id"],
            name=r_place["name"],
            coords=(r_place["latitude"], r_place["longitude"]),
        ),
    )


def filter_pub_bicileta(i: Item) -> bool:
    name = i.name.lower()
    desc = i.description.lower()
    return (
        i.state == State.PUB and 
        i.category.id_ not in [10, 11, 19] and 
        ("bici" in name or "ciclo" in name) and 
        ("casco" not in name or "triciclo" not in desc)
    )


def save_sent_ids(config: Config, ids: Iterable[int]):
    with open(config.db_file, "a") as dbfile:
        dbfile.writelines(map(lambda id: str(id)+'\n', ids))


def read_sent_ids(config:Config) -> list[int]:
    if not Path(f"./{config.db_file}").is_file():
        return []
    with open(config.db_file, "r") as dbfile:
        ids = dbfile.readlines()
    return [int(id) for id in ids]


def filter_not_sent(sent: list[int]) -> Callable[[Item], bool]:
    def f(i: Item) -> bool:
        return not i.id_ in sent
    return f

msg_send_count = 0
def wait_send():
    global msg_send_count
    sleep(1.05+.95*random())
    msg_send_count += 1
    if msg_send_count % 20 == 0:
        sleep(40+20*random()) # Avoid sending more than 20 messages per minute

def send_items(config: Config, items: list[Item]):
    bot = telegram.Bot(token=config.telegram_bot_token)
    for item in items:
        logger.info(f"Sending item '{item.name}' with id={item.id_}, file_id={item.file_id}, category.id={item.category.id_}")
        bot.send_photo(photo = item.file_url, caption = item.telegram_message, **config.telegram_send_conf)
        # bot.send_message(text=item.telegram_message, **config.telegram_send_conf)
        save_sent_ids(config, [item.id_])
        wait_send()


def main():
    parser = argparse.ArgumentParser(description="ReMAD telegram bot")
    parser.add_argument(
        "--prod",
        dest="prod",
        action="store_true",
        help="Whether the bot should run in production mode and send messages to channel (disabled by default)",
    )
    parser.add_argument("--conf", dest="conf", type=str, help="Config file")
    args = parser.parse_args()
    config = load_config(args)
    tokens = get_tokens()
    raw_data = get_raw_data(tokens)
    items = [parse_item(raw_item) for raw_item in raw_data]
    sent = read_sent_ids(config)
    bici_items = filter(filter_pub_bicileta, items)
    for i in bici_items:
        print(i)
    bici_items_not_sent = list(filter(filter_not_sent(sent), bici_items))
    send_items(config, bici_items_not_sent)

if __name__ == "__main__":
    main()
